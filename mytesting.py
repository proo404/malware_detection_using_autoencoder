import pandas as pd #Pandas is used to analyze data.

import matplotlib.pyplot as plt #a cross-platform, data visualization and graphical plotting library 

from sklearn.model_selection import train_test_split #Model selection is the process of selecting one final machine learning model from among a collection of candidate machine learning models for a training dataset.

from keras.layers import Input, Dense #Layers are the basic building blocks of neural networks in Keras

from keras import regularizers #helps in loss function

from keras.models import Model, load_model #saving and loading models
from keras.callbacks import ModelCheckpoint #Periodically save your model to disk
import numpy as np #used for working with arrays.
import tensorflow as tf  #fast numerical computing
import sys #used to manipulate different parts of the Python runtime environment

from sklearn.metrics import (confusion_matrix, precision_recall_curve, auc,
                             roc_curve, recall_score, classification_report, f1_score,
                             precision_recall_fscore_support)
                             #implements functions assessing prediction error for specific purposes

# Retrieve and prepare data using pandas

wannacry_data = pd.read_csv("/home/goku/lf/project/malware-detection-with-deep-learning-autoencoder/wannaCry_data/wannaCry.csv")
benign_data = pd.read_csv("./benign_data.csv").sample(frac = 1)
malware_data = pd.read_csv("./malware_data.csv").sample(frac = 1)

#splitting the data for training and testing
 
malware_train, malware_test = train_test_split(malware_data, test_size = 0.08)


#---------------------------------------------------------------------

#Data harmonization is the process of bringing together your data of varying file formats, naming conventions, and columns, and transforming it into one cohesive data set


def harmonize(data):
    m = data.values
    for i in range(0,len(m)):
        row_max = 1.*m[i].max()
        for j in range(0,len(m[i])):
            m[i][j]=1.*m[i][j]
            if row_max>0:
                m[i][j]=((m[i][j])/row_max)* 10**(len(str(row_max))-2)
    return pd.DataFrame(m/1000)

malware_train = harmonize(malware_train)
malware_test = harmonize(malware_test)
benign_data = harmonize(benign_data)
wannacry_data = harmonize(wannacry_data)

#----------------------------------------------------------------------------------------------------

# Autoencoder design


# input_dim is the number of dimensions of the features
input_dim = malware_train.shape[1]

print(input_dim)